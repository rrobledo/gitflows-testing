on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - dev
      - 'releases/**'
jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: root
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      matrix:
        python-version: ['3.9']
    name: Python ${{ matrix.python-version }} sample
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2

      # Sets up Python version 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.9'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Installs dependencies
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.3
        with:
          poetry-version: 1.1.11

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Installing postgresql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          pg_restore --version

      - name: Restore database
        run: |
          export PGPASSWORD=root
          psql -h localhost -U postgres -p 5432 -c 'create database tripper'
          psql -h localhost -U postgres -p 5432 -c 'CREATE USER tripper WITH PASSWORD tripper'
          psql -h localhost -U postgres -p 5432 -c 'grant all privileges on database tripper to tripper'
          pg_restore -h localhost -U postgres -p 5432 -d tripper ./tripper-v2.0.dump

      - name: Install dependencies
        run: |
          poetry install

      - name: Run Test and Coverage
        run: |
          poetry run pytest --cov-report xml --cov=demo ./tests/

#      - name: Produce the coverage report
#        uses: insightsengineering/coverage-action@v2
#        with:
#          # Path to the Cobertura XML report.
#          path: ./demo/coverage.xml
#          # Minimum total coverage, if you want to the
#          # workflow to enforce it as a standard.
#          # This has no effect if the `fail` arg is set to `false`.
#          threshold: 20
#          # Fail the workflow if the minimum code coverage
#          # reuqirements are not satisfied.
#          fail: true
#          # Publish the rendered output as a PR comment
#          publish: true
#          # Create a coverage diff report.
#          diff: true
#          # Branch to diff against.
#          # Compare the current coverage to the coverage
#          # determined on this branch.
#          diff-branch: main
#          # This is where the coverage reports for the
#          # `diff-branch` are stored.
#          # Branch is created if it doesn't already exist'.
#          diff-storage: _xml_coverage_reports
